package {{package}};

{{^jdk8-no-delegate}}
{{#imports}}import {{import}};
{{/imports}}

import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
{{/jdk8-no-delegate}}
import org.springframework.stereotype.Controller;
{{^jdk8-no-delegate}}
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
{{#useOptional}}
import java.util.Optional;
{{/useOptional}}
{{#async}}
import java.util.concurrent.Callable;
{{/async}}{{/jdk8-no-delegate}}
{{#useBeanValidation}}
import javax.validation.constraints.*;
import javax.validation.Valid;
{{/useBeanValidation}}
import javax.ws.rs.BadRequestException;
import javax.ws.rs.ClientErrorException;
import javax.ws.rs.core.Response;
{{>generatedAnnotation}}
@Controller
{{#operations}}
public abstract class {{classname}}Controller implements {{classname}} {
{{^jdk8-no-delegate}}{{#operation}}
    public {{#async}}Callable<{{/async}}ResponseEntity{{#async}}>{{/async}} {{{baseName}}}{{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
        {{/hasMore}}{{/allParams}}) {
        {{#queryParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "query"); {{/required}}{{/queryParams}}
        {{#pathParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "path"); {{/required}}{{/pathParams}}
        {{#headerParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "header"); {{/required}}{{/headerParams}}
        {{#bodyParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "body"); {{/required}}{{/bodyParams}}
        {{#formParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "form data");{{/required}}{{/formParams}}

        try {
            {{^async}}return ResponseEntity.ok({{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}));{{/async}}
        } catch (ClientErrorException e) {
            Error error = new Error();
            error.setMessage(e.getMessage());
            error.setCode(e.getResponse().getStatus());
            return ResponseEntity.status(e.getResponse().getStatus()).body(error);
        }
    }

    public abstract {{>returnTypes}} {{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
    {{/hasMore}}{{/allParams}});
{{/operation}}{{/jdk8-no-delegate}}

    /**
    * Validates a required parameter.
    * Parses parameter name from camel case to sentence case.
    * If example json class is provided, generates a json schema as example.
    * @throws SymphonySwaggerException on null parameter value
    */
    private void validateRequiredParameter(String paramName, Object paramValue, String requiredIn) throws BadRequestException {
        String name = paramName;
        for (int index = 0; index < name.length(); index++) {
            if (Character.isUpperCase(name.charAt(index))) {
                StringBuilder str = new StringBuilder(name);
                name = str.insert(index, " ").toString();
                index++;
            }
        }
        name = name.toLowerCase();

        if (paramValue == null) {
            throw new BadRequestException("This request requires a " + name +
                " to be provided with the " + requiredIn + ".");
        }
    }
}
{{/operations}}
